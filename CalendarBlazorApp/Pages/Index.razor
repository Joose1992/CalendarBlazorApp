@page "/"
@using CalendarBlazorApp.Data
@inject CalendarBlazorApp.Service.DayEventMainRepository _repo;

<PageTitle>Index</PageTitle>
<style type="text/css">
    #tblParent tbody tr td {
        width: 200px;
        height: 200px;
    }

    #divParent {
        position: relative;
    }

    #divModal {
        z-index: 10;
        position: absolute;
        border: 1px solid #000000;
        border-radius: 15px;
        background-color: #FFFFFF;
        left: 40%;
        top: 20%;
        width: 400px;
        min-height: 300px;
    }

    .modalheading {
        text-align: center;
        font-size: 50px;
        text-decoration: underline;
        margin-bottom: 36px;
    }
</style>
@code{
    DayEvent modelEvent = new DayEvent()
        {
            FromDate = DateTime.UtcNow,
            ToDate = DateTime.UtcNow,
            Note = string.Empty
        };
}
<div>
    <div>
        <h1>Blazor Caledar Example</h1>
    </div>
    <div>
        @if (displayModal)
        {
            <div id="divModal">
                <div class="container">
                    <div class="panel panel-defaul">
                        <div class="panel-heading modalheading">Set Note</div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-4">
                                    <label>From Date: </label>
                                </div>
                                <div class="col-md-8">
                                    <input type="date" @bind="modelEvent.FromDate" style="width: 100%" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <label>To Date: </label>
                                </div>
                                <div class="col-md-8">
                                    <input type="date" @bind="modelEvent.ToDate" style="width: 100%" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <label>Note: </label>
                                </div>
                                <div class="col-md-8">
                                    <input type="text" @bind="modelEvent.Note" placeholder="Type here...." />
                                </div>
                            </div>
                            <div class="row" style="margin-bottom: 10px">
                                <div class="col-md-6" style="text-align: right">
                                    <button class="btn btn-success" @onclick="SaveNote" style="float: right; margin-right: 3px;margin-top: 5px">Save</button>
                                    <button class="btn btn-danger" @onclick="CloseModal" style="float: right; margin-right: 5px; margin-top: 5px">Close</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        }
    </div>
    <div>
        <div style="margin-bottom: 10px">
            <select @onchange="LoadCalendar">
                @foreach (string month in monthNames)
                {
                    <option>@month</option>
                }
            </select>
        </div>
        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    @for (var dayIndex = 0; dayIndex < days.Count(); dayIndex++)
                    {
                        <th>
                            @days[dayIndex]
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @for(var weekIndex = 0; weekIndex < weeks.Count(); weekIndex++)
                {
                    <tr>
                        @for(var dayIndex = 0; dayIndex < weeks[weekIndex].Dates.Count(); dayIndex++)
                        {
                            var wIndex = weekIndex;
                            var dIndex = dayIndex;

                            <td @ondblclick="(()=>OpenModal(wIndex, dIndex))">
                                @weeks[weekIndex].Dates[dayIndex].DateValue
                                <br> <br>

                                <label style="color: #c00; font-weight:bold;">@weeks[weekIndex].Dates[dayIndex].Note</label>
                                <br> <br>

                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@code{

    bool displayModal = false;
    List<string> monthNames = new List<string>();
    List<string> days = new List<string>();
    List<WeekClass> weeks = new List<WeekClass>();
    DateTime startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    DateTime endDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);
    int selectedWeekIndex = -1;
    int selectedDayIndex = -1;


    protected override void OnInitialized()
    {
        modelEvent = new DayEvent();
        monthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames.ToList();
        GenerateCalendarHeader();
        GenerateCalendarBody();
    }

    private void LoadCalendar(ChangeEventArgs e)
    {
        var month = e.Value.ToString();
        var monthIndex = DateTime.ParseExact(month, "MMMM", System.Globalization.CultureInfo.CreateSpecificCulture("en-GB")).Month;
        startDate = new DateTime(DateTime.Now.Year, monthIndex, 1);
        endDate = (new DateTime(DateTime.Now.Year, monthIndex, 1)).AddMonths(1).AddDays(-1);
        GenerateCalendarHeader();
        GenerateCalendarBody();
    }

    private void GenerateCalendarHeader()
    {
        var day1 = new List<string>();
        for (var dt = startDate; dt <= endDate;dt = dt.AddDays(1))
        {
            day1.Add(dt.ToString("dddd"));
        }
        days = day1.Distinct().ToList();
    }

    private void GenerateCalendarBody()
    {
        weeks = new List<WeekClass>();
        var dayEvent = GetAllEvents(startDate, endDate);
        int flag = 0;
        WeekClass week = new WeekClass();
        List<DayEvent> dates = new List<DayEvent>();
        var totaDays = (int)(endDate - startDate).TotalDays;
        int countdays = 0;

        for(var dt = startDate; dt <= endDate; dt = dt.AddDays(1))
        {
            flag++;
            var currentObject = dayEvent.Find(x => x.FromDate == dt);
            dates.Add(new DayEvent()
            {
                DayEventID = currentObject == null? 0: currentObject.DayEventID,
                DateValue = dt.ToString("dd-MMM-yyyy"),
                DayName = dt.ToString("dddd"),
                Note = currentObject == null? "": currentObject.Note
            });

            if(flag == 7)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);

                dates = new List<DayEvent>();
                flag = 0;
            }

            if(countdays == totaDays)
            {
                week = new WeekClass();
                week.Dates = dates;
                weeks.Add(week);
                break;
            }
            countdays++;
        }

    }

    private void CloseModal()
    {
        ResetModal();
    }

    private void OpenModal(int wIndex, int dIndex)
    {
        selectedWeekIndex = wIndex;
        selectedDayIndex = dIndex;
        var date = Convert.ToDateTime(weeks[wIndex].Dates[dIndex].DateValue);
        var dayEventObject = GetCurrentEvent(date);
        if(dayEventObject.Count() > 0)
        {
            var result = dayEventObject.Find(x => x.FromDate == date);
            modelEvent = result;
        }
        modelEvent.FromDate = date;
        modelEvent.ToDate = date;
        displayModal = true;
    }

    private void SaveNote()
    {
        modelEvent = _repo.SaveOrUpdate(modelEvent);

        if(modelEvent.DayEventID > 0)
        {
            weeks[selectedWeekIndex].Dates[selectedDayIndex].DayEventID = modelEvent.DayEventID;
            weeks[selectedWeekIndex].Dates[selectedDayIndex].Note = modelEvent.Note;

            ResetModal();
        }
    }

    private void ResetModal()
    {
        displayModal = false;
        selectedDayIndex = -1;
        selectedWeekIndex = -1;

    }
    private List<DayEvent> GetAllEvents(DateTime fromDate, DateTime toDate)
    {
        return _repo.GetAllEvents(fromDate, toDate).ToList();
    }
    private List<DayEvent> GetCurrentEvent(DateTime datetime)
    {
        var unfilter = _repo.GetDayEvent(datetime).ToList();
       

        return unfilter;
    }
}